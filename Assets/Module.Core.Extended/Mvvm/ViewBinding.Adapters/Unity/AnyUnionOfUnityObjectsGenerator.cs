#if UNITY_EDITOR && ANNULUS_CODEGEN && MODULE_CORE_MVVM_ADAPTERS_GENERATOR

using System;
using Module.Core.CodeGen;
using UnityCodeGen;
using UnityEngine;

namespace Module.Core.Extended.Editor.Mvvm.Unity.Adapters
{
    [Generator]
    internal class AnyUnionOfUnityObjectsGenerator : ICodeGenerator
    {
        private readonly static string[] s_unityTypes = new string[] {
            nameof(Sprite),
            nameof(GameObject),
            nameof(AudioClip),
        };

        public void Execute(GeneratorContext context)
        {
            var nameofGenerator = nameof(AnyUnionOfUnityObjectsGenerator);

            if (CodeGenAPI.TryGetOutputFolderPath(nameofGenerator, out var outputPath) == false)
            {
                context.OverrideFolderPath("Assets");
                return;
            }

            var p = Printer.DefaultLarge;
            p.PrintAutoGeneratedBlock(nameofGenerator);
            p.PrintEndLine();
            p.PrintLine(@"#pragma warning disable

using Module.Core.Unions;
using UnityEngine;
");

            p.PrintLine("namespace Module.Core.Mvvm.ViewBinding.Adapters.Unity");
            p.OpenScope();
            {
                var unityTypes = s_unityTypes.AsSpan();

                for (var i = 0; i < unityTypes.Length; i++)
                {
                    var type = unityTypes[i];

                    p.PrintLine($"public readonly partial struct Union_{type} : IUnion<{type}> {{ }}");
                    p.PrintEndLine();
                }
            }
            p.CloseScope();
            p.PrintEndLine();

            context.OverrideFolderPath(outputPath);
            context.AddCode($"AnyUnionOfUnityObjects.gen.cs", p.Result);
        }
    }
}

#endif
